"" This config file contains common configuration that I want to use in my
"" normal use of Vim as well as in Vim as pager.

set nocompatible               " be iMproved
filetype off                   " required!
let mapleader = ','


if !exists("vundle_default_git_proto")
    "" let Vundle manage Vundle
    "" git://github.com/gmarik/vundle.git
    set rtp+=~/.vim/bundle/vundle/
    call vundle#rc()
    let g:vundle_default_git_proto = 'git'
endif

"" required!
Bundle 'gmarik/vundle'

" Bundle 'ZoomWin'
Bundle 'dahu/LearnVim'
Bundle 'bronson/vim-visual-star-search'
Bundle 'matchit.zip'
Bundle 'skammer/vim-css-color'

"" easymotion
Bundle 'Lokaltog/vim-easymotion'
let g:EasyMotion_leader_key = '<Leader>j'

"" translate
"" you can print the last translated word with ""p
Bundle 'mattn/webapi-vim'
" let g:trans_has_python = 0
" Bundle 'Rykka/trans.vim'
" let g:trans_default_lang = 'en'
""  let g:trans_map_trans = '<Leader>tt'

" Bundle 'lookup.vim'
Bundle 'ypid/lookup.vim'
" let g:lookup_dict_para = []
nmap <Leader>tr :Lookup<CR>
vmap <Leader>tr :call LookupVisual()<CR>


" Vim UI {

" Bundle 'altercation/vim-colors-solarized'
" if filereadable(expand("~/.vim/bundle/vim-colors-solarized/colors/solarized.vim"))
"     let g:solarized_termcolors=256
"     color solarized                 " Load a colorscheme
" endif
" let g:solarized_termtrans=1
" let g:solarized_contrast="high"
" let g:solarized_visibility="high"
" set tabpagemax=15               " Only show 15 tabs
" set showmode                    " Display the current mode

" set cursorline                  " Highlight current line

" highlight clear SignColumn      " SignColumn should match background for
" things like vim-gitgutter

if has("python") || has("python3")
    Bundle 'Lokaltog/powerline', {'rtp':'/powerline/bindings/vim'}
else
    Bundle 'Lokaltog/vim-powerline'
endif
if has('cmdline_info')
    set ruler                   " Show the ruler
    set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
    set showcmd                 " Show partial commands in status line and
    " Selected characters/lines in visual mode
endif

if has('statusline')
    set laststatus=2

    " Broken down into easily includeable segments
    set statusline=%<%f\                     " Filename
    set statusline+=%w%h%m%r                 " Options
    set statusline+=%{fugitive#statusline()} " Git Hotness
    set statusline+=\ [%{&ff}/%Y]            " Filetype
    set statusline+=\ [%{getcwd()}]          " Current dir
    set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
endif

" set backspace=indent,eol,start  " Backspace for dummies
" set linespace=0                 " No extra spaces between rows
set incsearch                   " Find as you type search
set hlsearch                    " Highlight search terms
set winminheight=0              " Windows can be 0 line high
set ignorecase                  " Case insensitive search
set smartcase                   " Case sensitive when uc present
set wildmenu                    " Show list instead of just completing
set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
set scrolljump=5                " Lines to scroll when cursor leaves screen
set scrolloff=3                 " Minimum lines to keep above and below cursor
set foldenable                  " Auto fold code
set list
set listchars=tab:→\ ,eol:$,trail:.,extends:>,precedes:<,nbsp:_
" }

"" Mappings {{{1
set pastetoggle=<F2>

"" map: nvo
"" map!: ic

"" I use this so that Ctrl-c also works in the command-line window like Escape.
"" Does not work
" map! <c-c> <ESC>

"" colorscheme delek
"" colorscheme default

"" Behavior {{{1
set nofoldenable
"" Showing line numbers and length
set number  " show line numbers
" set relativenumber
" set showbreak=…
set tw=79   " width of document (used by gd)
"set nowrap  " don't automatically wrap on load
set fo-=t   " don't automatically wrap text when typing
set autochdir
set ruler
set rulerformat=%55(%{strftime('%a\ %b\ %e\ %H:%M\ %p')}\ %5l,%-6(%c%V%)\ %P%)

"" Filetype detact
map <Leader>fd :filetype detect<CR>
inoremap <Leader>fd <ESC>:filetype detect<CR>a

"" erase bad whitespace from vim-bad-whitespace
map <Leader>fc :EraseBadWhitespace<CR>
inoremap <Leader>fc <ESC>:EraseBadWhitespace<<CR>a

"" Toggle highlight search
map <Leader>b :nohl<CR>
inoremap <Leader>b <ESC>:nohl<CR>a

"" <Leader>a does interfere <c-a>
map <Leader>p :set number!<CR>
inoremap <Leader>p <ESC>:set number!<CR>a

"" Bind set list
map <Leader>l :set list!<CR>
inoremap <Leader>l <ESC>:set list!<CR>a
" map <c-i> :set list!<CR>
" inoremap <c-i> <ESC>:set list!<CR>a

"" Insert current full path of the file
inoremap <Leader>fp <ESC>:put =expand('%:p')<CR>kJA

"" Insert current file name
" inoremap <Leader>fn <ESC>"%p<CR>g;
"" Just use Ctrl-r%

"" Spellcheck
set spelllang=en_us
hi clear SpellBad
hi SpellBad cterm=underline
map <Leader>c :set spell!<CR>
inoremap <Leader>c <ESC>:set spell!<CR>a

"" Save and go to normal mode
map <Leader>s :update<CR>
inoremap <Leader>s <ESC>:update<CR>l

"" Save and exit
map <Leader>x :x<CR>
inoremap <Leader>x <ESC>:x<CR>

"" Quick quit command
nnoremap <Leader>e :quit<CR>
"" Quit current window
" nnoremap <Leader>E :qa!<CR>
"" Quit all windows

"" ``<C>`` stands for ``CTRL`` and therefore ``<C-n>`` stands for ``CTRL+n``
"" bind Ctrl+<movement> keys to move around the windows, instead of using Ctrl+w + <movement>
"" Every unnecessary keystroke that can be saved is good for your health :)
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

"" Insert newline without entering insert mode
map <Leader>Q O<Esc>
map <Leader>q o<Esc>

"" Unbind the cursor keys in insert, normal and visual modes.
"" Luckily I do not use them anymore.
for prefix in ['i', 'n', 'v']
    for key in ['<Up>', '<Down>', '<Left>', '<Right>']
        exe prefix . "noremap " . key . " <Nop>"
    endfor
endfor

"" easier moving between tabs
map <Leader>n <esc>:tabprevious<CR>
map <Leader>m <esc>:tabnext<CR>

"" easier moving between buffers
map <Leader>w <esc>:bNext<CR>

"" set the executable bit
map <Leader>y :w!<CR>:!chmod +x %<CR>:q<CR>
inoremap <Leader>y <ESC>:w!<CR>:!chmod +x %<CR>:q<CR>a

"" map sort function to a key
"" vnoremap <Leader> :sort<CR>

"" easier moving of code blocks
vnoremap < <gv
vnoremap > >gv

"" easier formatting of paragraphs
" vmap Q gq
" nmap Q gqap


if filereadable($HOME.'/.vimrc_private')
    source ~/.vimrc_private
endif
